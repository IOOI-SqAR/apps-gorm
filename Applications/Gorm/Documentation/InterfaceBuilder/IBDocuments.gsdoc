<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="IBDocuments">
  <head>
    <title>IBDocuments documentation</title>
    <author name="Generated by heron"></author>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the IBDocuments protocol
      </heading>
      <protocol name="IBDocuments">
        <declared>InterfaceBuilder/IBDocuments.h</declared>
        <conform>NSObject</conform>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
        <method type="NSArray*">
          <sel>actionsOfClass:</sel>
          <arg type="NSString*">className</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void">
          <sel>addConnector:</sel>
          <arg type="id&lt;IBConnectors&gt;">aConnector</arg>
          <desc>
            Add a connection
          </desc>
        </method>
        <method type="NSArray*">
          <sel>allConnectors</sel>
          <desc>
            Returns an array containing all connections for the
            receiver.
          </desc>
        </method>
        <method type="void">
          <sel>attachObject:</sel>
          <arg type="id">anObject</arg>
          <sel>toParent:</sel>
          <arg type="id">aParent</arg>
          <desc>
            Attaches an object to the document and makes the
            association with the parent.
          </desc>
        </method>
        <method type="void">
          <sel>attachObject:</sel>
          <arg type="id">anObject</arg>
          <sel>toParent:</sel>
          <arg type="id">aParent</arg>
          <sel>withName:</sel>
          <arg type="NSString*">aName</arg>
          <desc>
            Attach object to document with a specified name.
            Pass <code>nil</code> to <var>aName</var> to have Gorm
            assign a name to it. (GS extension)
          </desc>
        </method>
        <method type="void">
          <sel>attachObjects:</sel>
          <arg type="NSArray*">anArray</arg>
          <sel>toParent:</sel>
          <arg type="id">aParent</arg>
          <desc>
            Iterates over <var>anArray</var> and attaches all
            objects in it to the receiver with
            <var>aParent</var> as the parent.
          </desc>
        </method>
        <method type="NSString*">
          <sel>classForObject:</sel>
          <arg type="id">obj</arg>
          <desc>
            Returns a string with the name of the class for the
            given object.
          </desc>
        </method>
        <method type="NSArray*">
          <sel>connectorsForDestination:</sel>
          <arg type="id">destination</arg>
          <desc>
            Returns an autoreleased array containing all
            connections for the given
            <var>destination</var>.
          </desc>
        </method>
        <method type="NSArray*">
          <sel>connectorsForDestination:</sel>
          <arg type="id">destination</arg>
          <sel>ofClass:</sel>
          <arg type="Class">aConnectorClass</arg>
          <desc>
            Returns an autoreleased array containing all
            connectors of the given class for the
            <var>destination</var>.
          </desc>
        </method>
        <method type="NSArray*">
          <sel>connectorsForSource:</sel>
          <arg type="id">source</arg>
          <desc>
            Returns an autoreleased array containing all
            connections for the given <var>source</var>.
          </desc>
        </method>
        <method type="NSArray*">
          <sel>connectorsForSource:</sel>
          <arg type="id">source</arg>
          <sel>ofClass:</sel>
          <arg type="Class">aConnectorClass</arg>
          <desc>
            Returns an autoreleased array containing all
            connectors of the given class for the
            <var>source</var>.
          </desc>
        </method>
        <method type="BOOL">
          <sel>containsObject:</sel>
          <arg type="id">anObject</arg>
          <desc>
            Returns <code>YES</code>, if the receiver contains
            <var>anObject</var>.
          </desc>
        </method>
        <method type="BOOL">
          <sel>containsObjectWithName:</sel>
          <arg type="NSString*">aName</arg>
          <sel>forParent:</sel>
          <arg type="id">parent</arg>
          <desc>
            Returns <code>YES</code>, if the receiver contains
            an object with the given name and <var>parent</var>.
          </desc>
        </method>
        <method type="BOOL">
          <sel>copyObject:</sel>
          <arg type="id">anObject</arg>
          <sel>type:</sel>
          <arg type="NSString*">aType</arg>
          <sel>toPasteboard:</sel>
          <arg type="NSPasteboard*">aPasteboard</arg>
          <desc>
            Copies <var>anObject</var> to the pasteboard with
            the <var>aType</var>.
          </desc>
        </method>
        <method type="BOOL">
          <sel>copyObjects:</sel>
          <arg type="NSArray*">anArray</arg>
          <sel>type:</sel>
          <arg type="NSString*">aType</arg>
          <sel>toPasteboard:</sel>
          <arg type="NSPasteboard*">aPasteboard</arg>
          <desc>
            Copues an array of objects to <var>aPasteboard</var>
            with <var>aType</var>.
          </desc>
        </method>
        <method type="void">
          <sel>detachObject:</sel>
          <arg type="id">anObject</arg>
          <desc>
            Detaches <var>anObject</var> from the receiver.
          </desc>
        </method>
        <method type="void">
          <sel>detachObject:</sel>
          <arg type="id">anObject</arg>
          <sel>closeEditor:</sel>
          <arg type="BOOL">close_editor</arg>
          <desc>
            Detaches an object from the receiver, closes
            editor if asked. GNUstep extension.
          </desc>
        </method>
        <method type="void">
          <sel>detachObjects:</sel>
          <arg type="NSArray*">anArray</arg>
          <desc>
            Detaches an array of objects from the receiver.
          </desc>
        </method>
        <method type="void">
          <sel>detachObjects:</sel>
          <arg type="id">anObject</arg>
          <sel>closeEditors:</sel>
          <arg type="BOOL">close_editor</arg>
          <desc>
            Detaches an array of objects from the receiver.
            Closes editor if asked. GNUstep extension.
          </desc>
        </method>
        <method type="NSString*">
          <sel>documentPath</sel>
          <desc>
            The path of the file which represents the document.
          </desc>
        </method>
        <method type="void">
          <sel>editor:</sel>
          <arg type="id&lt;IBEditors&gt;">anEditor</arg>
          <sel>didCloseForObject:</sel>
          <arg type="id">anObject</arg>
          <desc>
            Called when an editor is closed.
          </desc>
        </method>
        <method type="id&lt;IBEditors&gt;">
          <sel>editorForObject:</sel>
          <arg type="id">anObject</arg>
          <sel>create:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            Returns the associated editor for
            <var>anObject</var>, if <var>flag</var> is
            <code>YES</code>, it will create an instance of the
            editor class if one does not already exist for the
            given object.
          </desc>
        </method>
        <method type="id&lt;IBEditors&gt;">
          <sel>editorForObject:</sel>
          <arg type="id">anObject</arg>
          <sel>inEditor:</sel>
          <arg type="id&lt;IBEditors&gt;">anEditor</arg>
          <sel>create:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            Returns the associated subeditor for
            <var>anObject</var>, if <var>flag</var> is
            <code>YES</code>, it will create an instance of the
            editor.
          </desc>
        </method>
        <method type="NSString*">
          <sel>nameForObject:</sel>
          <arg type="id">anObject</arg>
          <desc>
            Returns the name associated with the object.
          </desc>
        </method>
        <method type="id">
          <sel>objectForName:</sel>
          <arg type="NSString*">aName</arg>
          <desc>
            Returns the object for the given <var>aName</var>.
          </desc>
        </method>
        <method type="NSArray*">
          <sel>objects</sel>
          <desc>
            Returns all objects in the receiver's name table.
          </desc>
        </method>
        <method type="id&lt;IBEditors&gt;">
          <sel>openEditorForObject:</sel>
          <arg type="id">anObject</arg>
          <desc>
            Creates an editor, if necessary using
            editorForObject:create:, opens it
            and brings the window containing the editor to the
            front.
          </desc>
        </method>
        <method type="NSArray*">
          <sel>outletsOfClass:</sel>
          <arg type="NSString*">className</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id&lt;IBEditors,IBSelectionOwners&gt;">
          <sel>parentEditorForEditor:</sel>
          <arg type="id&lt;IBEditors&gt;">anEditor</arg>
          <desc>
            Returns the parent of the given editor.
          </desc>
        </method>
        <method type="id">
          <sel>parentOfObject:</sel>
          <arg type="id">anObject</arg>
          <desc>
            Return the parent of <var>anObject</var>. The File's
            Owner is the root object in the hierarchy, if
            anObject's parent is the Files's Owner, this
            method should return <code>nil</code>.
          </desc>
        </method>
        <method type="NSArray*">
          <sel>pasteType:</sel>
          <arg type="NSString*">aType</arg>
          <sel>fromPasteboard:</sel>
          <arg type="NSPasteboard*">aPasteboard</arg>
          <sel>parent:</sel>
          <arg type="id">parent</arg>
          <desc>
            Pastes the given type from the
            <var>aPasteboard</var>.
          </desc>
        </method>
        <method type="void">
          <sel>removeConnector:</sel>
          <arg type="id&lt;IBConnectors&gt;">aConnector</arg>
          <desc>
            Remove <var>aConnector</var> from the receiver.
          </desc>
        </method>
        <method type="void">
          <sel>resignSelectionForEditor:</sel>
          <arg type="id&lt;IBEditors&gt;">editor</arg>
          <desc>
            The current <var>editor</var> wants to give up the
            selection, this method iterates over all editors
            and determines if any editors will take over the
            selection. If one is found it is activated.
          </desc>
        </method>
        <method type="void">
          <sel>setName:</sel>
          <arg type="NSString*">aName</arg>
          <sel>forObject:</sel>
          <arg type="id">object</arg>
          <desc>
            Set <var>aName</var> for <var>object</var> in the
            receiver. This replaces any name the
            <var>object</var> may have previously had.
          </desc>
        </method>
        <method type="void">
          <sel>setSelectionFromEditor:</sel>
          <arg type="id&lt;IBEditors&gt;">anEditor</arg>
          <desc>
            Sets the currently selected object from the given
            editor.
          </desc>
        </method>
        <method type="void">
          <sel>touch</sel>
          <desc>
            Mark document as having been changed.
          </desc>
        </method>
      </protocol>
    </chapter>
  </body>
</gsdoc>
