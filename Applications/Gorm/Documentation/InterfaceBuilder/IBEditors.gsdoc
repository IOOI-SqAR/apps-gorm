<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="IBEditors">
  <head>
    <title>IBEditors documentation</title>
    <author name="Generated by heron"></author>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the IBEditors protocol
      </heading>
      <protocol name="IBEditors">
        <declared>InterfaceBuilder/IBEditors.h</declared>
        <conform>NSObject</conform>
        <desc>
          The IBEditors protocol defines the methods an editor must
          implement.
        </desc>
        <method type="BOOL">
          <sel>acceptsTypeFromArray:</sel>
          <arg type="NSArray*">types</arg>
          <desc>
            Decide whether an editor can accept data from the
            pasteboard.
          </desc>
        </method>
        <method type="BOOL">
          <sel>activate</sel>
          <desc>
            Activate an editor - inserts it into the view
            hierarchy or whatever is needed for the editor to
            be able to provide its functionality. This method should
            be called by the document when an editor is created or
            opened. It should be safe to call repeatedly.
          </desc>
        </method>
        <method type="void">
          <sel>close</sel>
          <desc>
            Close an editor - this destroys the editor. In this
            method the editor should tell its document that it
            has been closed, so that the document can remove all
            its references to the editor.
          </desc>
        </method>
        <method type="void">
          <sel>closeSubeditors</sel>
          <desc>
            Close all subeditors associated with this editor.
          </desc>
        </method>
        <method type="void">
          <sel>deactivate</sel>
          <desc>
            Deactivate an editor - removes it from the view
            hierarchy so that objects can be archived without
            including the editor. This method should be
            called automatically by the 'close' method. It
            should be safe to call repeatedly.
          </desc>
        </method>
        <method type="void">
          <sel>deleteSelection</sel>
          <desc>
            This method deletes all the objects in the current
            selection in the editor.
          </desc>
        </method>
        <method type="id/*&lt;IBDocuments&gt;*/">
          <sel>document</sel>
          <desc>
            This method returns the document that owns the object
            that the editor edits.
          </desc>
        </method>
        <method type="id">
          <sel>editedObject</sel>
          <desc>
            This method returns the object that the editor is
            editing.
          </desc>
        </method>
        <method type="id">
          <sel>initWithObject:</sel>
          <arg type="id">anObject</arg>
          <sel>inDocument:</sel>
          <arg type="id/*&lt;IBDocuments&gt;*/">aDocument</arg>
          <desc>
            Initializes the editor with object for the
            specified document.
          </desc>
        </method>
        <method type="id&lt;IBEditors&gt;">
          <sel>openSubeditorForObject:</sel>
          <arg type="id">object</arg>
          <desc>
            Opens the subeditor for an <var>object</var> when the
            <var>object</var> being edited is
            <strong>double</strong> clicked by the user. If
            there is no sub-editor, return <code>nil</code>,
            otherwise method will return the editor for the
            <var>object</var>.
          </desc>
        </method>
        <method type="void">
          <sel>orderFront</sel>
          <desc>
            This method is used to ensure that the editor is
            visible on screen.
          </desc>
        </method>
        <method type="void">
          <sel>pasteInSelection</sel>
          <desc>
            This method is used to add the contents of the
            pasteboard to the current selection of objects
            within the editor.
          </desc>
        </method>
        <method type="void">
          <sel>resetObject:</sel>
          <arg type="id">anObject</arg>
          <desc>
            Redraws the edited object
          </desc>
        </method>
        <method type="void">
          <sel>validateEditing</sel>
          <desc>
            Causes the editor to select the text being edited in
            the current text field.
          </desc>
        </method>
        <method type="BOOL">
          <sel>wantsSelection</sel>
          <desc>
            When an editor resigns the selection ownership, all
            editors are asked if they want selection ownership,
            and the first one to return <code>YES</code> gets made
            into the current selection owner.
          </desc>
        </method>
        <method type="NSWindow*">
          <sel>window</sel>
          <desc>
            This returns the window in which the editor is drawn.
          </desc>
        </method>
      </protocol>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the IBSelectionOwners
        protocol
      </heading>
      <protocol name="IBSelectionOwners">
        <declared>InterfaceBuilder/IBEditors.h</declared>
        <conform>NSObject</conform>
        <desc>
          The IBSelectionOwners protocol defines the methods that a
          selection owner must implement.
        </desc>
        <method type="void">
          <sel>copySelection</sel>
          <desc>
            This method places the current selection from the
            editor on the pasteboard.
          </desc>
        </method>
        <method type="void">
          <sel>drawSelection</sel>
          <desc>
            Draw the selection.
          </desc>
        </method>
        <method type="void">
          <sel>makeSelectionVisible:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            This method is used to draw or remove markup that
            identifies selected objects within the object
            being edited.
          </desc>
        </method>
        <method type="void">
          <sel>selectObjects:</sel>
          <arg type="NSArray*">objects</arg>
          <desc>
            This method changes the current selection to those
            <var>objects</var> in the array.
          </desc>
        </method>
        <method type="NSArray*">
          <sel>selection</sel>
          <desc>
            Return the selection in an array.
          </desc>
        </method>
        <method type="NSUInteger">
          <sel>selectionCount</sel>
          <desc>
            The number of currently selected objects.
          </desc>
        </method>
      </protocol>
    </chapter>
  </body>
</gsdoc>
